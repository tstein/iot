#!/usr/bin/env python3

from __future__ import division

import datetime
import io
import json
import math
import pickle
import time
from collections import deque
from os.path import expanduser
from threading import Thread

import pigpio
import pytz
from flask import Flask, send_file
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
from matplotlib.dates import epoch2num, num2date, DateFormatter, DayLocator
from matplotlib.figure import Figure

import lib.mqtt as mqtt
import lib.config as config

service_name = __file__.split("/")[-1]
window_length = 60 * 24 * 7
reads_per_log = 60
read_interval = 60
pickle_path = expanduser("~/air.pickle")
location = config.byhostname(
    "unknown location",
    kontos="downstairs",
    sarissa="upstairs")

def buffer(): return deque(maxlen=window_length)
readings = buffer()

gpio = pigpio.pi()
app = Flask(service_name)

def log(msg):
    log_file = "/var/log/air.log"
    tstamp = datetime.datetime.now().isoformat()
    with open(log_file, 'a') as l:
        line = "{} - {}\n".format(tstamp, msg)
        l.write(line)

def c_to_f(c):
    return (c * 9 / 5) + 32

def read_air():
    i2c = gpio.i2c_open(1, 0x40)

    gpio.i2c_write_device(i2c, [0xF5])
    time.sleep(0.1)
    _, rh_raw = gpio.i2c_read_device(i2c, 3) # msb, lsb, checksum
    rh_val = (rh_raw[0]<<8) + rh_raw[1]
    rh = round(((125.0 * rh_val)/65536.0) - 6.0, 1)

    gpio.i2c_write_device(i2c, [0xF3]) # T no hold
    time.sleep(0.1)
    _, t_raw = gpio.i2c_read_device(i2c, 3) # msb, lsb, checksum
    t_val = (t_raw[0]<<8) + t_raw[1]
    temp_c = round(((175.72 * t_val)/65536.0) - 46.85, 1)

    gpio.i2c_close(i2c)
    return round(rh, 1), round(temp_c, 1)

def monitor_air():
    ticks = 0
    while True:
        rh, temp_c = read_air()
        readings.append((time.time(), rh, temp_c))

        if ticks % reads_per_log == 0:
            log("temperature: {} C, relative humidity: {}%".format(temp_c, rh))

        with open(pickle_path, "wb") as f:
            pickle.dump(readings, f)

        ticks = ticks + 1
        time.sleep(read_interval)

def publish_temp():
    if not readings: return None
    return round(readings[-1][2])

def publish_temp_f():
    c = publish_temp()
    if c is None: return None
    return round(c_to_f(c))

def publish_rh():
    if not readings: return None
    return round(readings[-1][1])

@app.route("/history.png")
def history_png():
    def dew_point(t, rh):
        b, c = 17.368, 238.88
        gamma = math.log(rh / 100) + ((b * t) / (c + t))
        dp = ((c * gamma) / (b - gamma))
        return dp

    figure = Figure()
    figure.suptitle(location + " air")
    times, rhs, temps_c = zip(*readings)
    dates = num2date(epoch2num(times))
    temps_f = [c_to_f(c) for c in temps_c]
    dew_points = [c_to_f(dew_point(t, rh)) for _, rh, t in readings]

    rh_ax = figure.add_subplot(111)
    rh_ax.plot_date(dates, rhs, label="humidity (%)", fmt="b-")
    rh_ax.set_ylabel("relative humidity (%)", color="b")
    rh_ax.set_ylim(bottom=0, top=100)
    rh_handles, rh_labels = rh_ax.get_legend_handles_labels()

    temp_ax = rh_ax.twinx()
    temp_ax.plot_date(dates, temps_f, label="temperature (°F)", fmt="r-")
    temp_ax.plot_date(dates, dew_points, label="dew point(°F)", fmt="g-")
    temp_ax.set_ylabel("temperature (°F)", color="r")
    temp_ax.set_ylim(bottom=30, top=80)
    temp_handles, temp_labels = temp_ax.get_legend_handles_labels()

    temp_ax.legend(temp_handles + rh_handles, temp_labels + rh_labels,
            loc='upper center', bbox_to_anchor=(0.5, 1.05),
            ncol=4, fancybox=True, shadow=True)
    temp_ax.xaxis.set_major_locator(DayLocator(
        tz=pytz.timezone("America/Los_Angeles")))
    temp_ax.xaxis.set_major_formatter(DateFormatter('%m/%d',
        tz=pytz.timezone("America/Los_Angeles")))

    canvas = FigureCanvas(figure)
    output = io.BytesIO()
    canvas.print_png(output)
    output.seek(0)
    return send_file(output, mimetype="image/png")


@app.route("/")
def air():
    rh, temp_c = read_air()
    temp_f = round(((temp_c * 9 / 5) + 32), 1)
    d = {"rh": rh,
         "temp_c": temp_c,
         "temp_f": temp_f}
    return json.dumps(d)

if __name__ == '__main__':
    log("****************")
    log("* Starting up! *")
    log("****************")

    with open(pickle_path, "rb") as f:
        old_readings = pickle.load(f)
        readings.extend(old_readings)

    Thread(target=monitor_air, daemon=True).start()
    mqtt.start_client(service_name)
    mqtt.publish_forever("ambient/temperature/" + location, publish_temp)
    mqtt.publish_forever("ambient/temperature_f/" + location, publish_temp_f)
    mqtt.publish_forever("ambient/humidity/" + location, publish_rh)
    app.run(host="0.0.0.0", port=1316)  # 1000 + sum(map(ord, "air"))
