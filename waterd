#!/usr/bin/env python3

from __future__ import division

import datetime
import json
from collections import deque, namedtuple
from statistics import mean
from threading import Thread
from time import sleep

import pigpio
import spidev
from flask import Flask

window_length = 60
reads_per_log = 60
read_interval = 60

Plant = namedtuple("Plant", ("name", "pin", "channel", "readings"))
plants = [Plant("palm bush", 21, 0, deque(maxlen=window_length))]

port = 54700
app = Flask(__name__)


def log(msg):
    log_file = "/var/log/water.log"
    tstamp = datetime.datetime.now().isoformat()
    with open(log_file, 'a') as l:
        line = "{} - {}\n".format(tstamp, msg)
        l.write(line)

@app.route("/water_levels")
def water_levels():
    levels = dict((p.name, mean(p.readings)) for p in plants)
    return json.dumps(levels)

def read_moisture(gpio, pin, channel):
    def bitstring(n):
        s = bin(n)[2:]
        return '0' * (8 - len(s)) + s

    gpio.write(pin, 1)
    sleep(.005)

    cmd = 128 + (8 * channel)
    with spidev.SpiDev(0, 0) as conn:
        conn.max_speed_hz = 1200000
        reply_bytes = conn.xfer([cmd, 0])

    gpio.write(pin, 0)

    reply_bitstring = ''.join(bitstring(n) for n in reply_bytes)
    reply = reply_bitstring[5:15]
    return int(reply, 2) / 2**10

if __name__ == '__main__':
    log("****************")
    log("* Starting up! *")
    log("****************")
    ticks = 0
    gpio = pigpio.pi()
    Thread(target=lambda: app.run(host="0.0.0.0", port=port)).start()

    while True:
        for plant in plants:
            moisture = read_moisture(gpio, plant.pin, plant.channel)
            plant.readings.append(moisture)

            ticks = ticks + 1
            if ticks % reads_per_log == 0:
                log("{}: {}".format(plant.name, mean(plant.readings)))

        sleep(read_interval)
