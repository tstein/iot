#!/usr/bin/env python3

import datetime
import logging
import os
import shutil
import tempfile
import time

import gphoto2 as gp

from lib import config, mqtt


DARKROOM_ROOT = '/mnt/darkroom'
OPERATORS = {
    'D800':  'ted',
    'E5823': 'ted',
    'D7100': 'ruba'
}


def parse_summary(camera, context):
  summary = gp.check_result(gp.gp_camera_get_summary(camera, context))
  prop_strings = [p.split(':') for p in summary.text.split("\n") if ':' in p]
  props = {p[0]: p[1].strip() for p in prop_strings}
  return props


def get_model(camera, context):
  props = parse_summary(camera, context)
  return props['Model']


def get_operator(model):
  return OPERATORS[model] if model in OPERATORS else 'photosd_unknown'


def find_photos(camera, path='/'):
  files = gp.check_result(
      gp.gp_camera_folder_list_files(camera, path))
  for name, _ in files:
    if 'DCIM' in path:
      yield os.path.join(path, name)

  folders = gp.check_result(
      gp.gp_camera_folder_list_folders(camera, path))
  for name, _ in folders:
    yield from find_photos(camera, os.path.join(path, name))


def pull_photo(camera, file_path, dest_dir):
  folder, name = os.path.split(file_path)
  dest_path = os.path.join(dest_dir, name)
  camera_file = gp.check_result(gp.gp_camera_file_get(
    camera, folder, name, gp.GP_FILE_TYPE_NORMAL))
  gp.check_result(gp.gp_file_save(camera_file, dest_path))
  return dest_path


def pull_photos(camera, model, operator):
  darkroom_album = os.path.join(
      model, datetime.date.strftime(datetime.date.today(), '%Y-%m-%d'))
  darkroom_dir = os.path.join(DARKROOM_ROOT, darkroom_album)
  try:
    os.makedirs(darkroom_dir)
  except FileExistsError:
    pass

  pull_start = time.time()
  found_photos = find_photos(camera)
  pulled_photos = [pull_photo(camera, p, darkroom_dir) for p in found_photos]
  pull_elapsed = int(time.time() - pull_start)

  total_size_mb = sum([os.path.getsize(p) for p in pulled_photos]) / 2**20
  pull_rate = total_size_mb / pull_elapsed
  logging.info('pulled %d photos (%d MB) in %d s (%.1f MB/s): %s',
      len(pulled_photos), total_size_mb, pull_elapsed, pull_rate,
      pulled_photos)
  return pulled_photos


def main():
  logging.basicConfig(
      format='%(levelname)s: %(name)s: %(message)s', level=logging.INFO)
  gp.check_result(gp.use_python_logging())
  mqtt.start_client(config.service_name())

  context = gp.gp_context_new()
  processed = False

  while True:
    time.sleep(2)
    cameras = gp.check_result(gp.gp_camera_autodetect())
    if not cameras:
      processed = False
      continue

    if not processed:
      name, addr = cameras[0]
      camera = gp.Camera()
      port_info_list = gp.PortInfoList()
      port_info_list.load()
      idx = port_info_list.lookup_path(addr)
      camera.set_port_info(port_info_list[idx])
      try:
        camera.init()

        model = get_model(camera, context)
        operator = get_operator(model)
        logging.info('found %s\'s %s', operator, model)

        new_photos = pull_photos(camera, model, operator)
        mqtt.tell(
            operator,
            'pulled {} new photos from the {}'.format(len(new_photos), model))

        camera.exit()
      except gp.GPhoto2Error as e:
        logging.error(e)
        continue
      processed = True


if __name__ == '__main__':
  main()


# vim:shiftwidth=2
